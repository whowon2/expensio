/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { ServerRoute as ApiProductsServerRouteImport } from './routes/api/products'
import { ServerRoute as ApiPricesServerRouteImport } from './routes/api/prices'
import { ServerRoute as ApiLocationsServerRouteImport } from './routes/api/locations'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiProductsServerRoute = ApiProductsServerRouteImport.update({
  id: '/api/products',
  path: '/api/products',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPricesServerRoute = ApiPricesServerRouteImport.update({
  id: '/api/prices',
  path: '/api/prices',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiLocationsServerRoute = ApiLocationsServerRouteImport.update({
  id: '/api/locations',
  path: '/api/locations',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/login' | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/login' | '/signup'
  id: '__root__' | '/' | '/dashboard' | '/login' | '/signup'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}
export interface FileServerRoutesByFullPath {
  '/api/locations': typeof ApiLocationsServerRoute
  '/api/prices': typeof ApiPricesServerRoute
  '/api/products': typeof ApiProductsServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/locations': typeof ApiLocationsServerRoute
  '/api/prices': typeof ApiPricesServerRoute
  '/api/products': typeof ApiProductsServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/locations': typeof ApiLocationsServerRoute
  '/api/prices': typeof ApiPricesServerRoute
  '/api/products': typeof ApiProductsServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/locations' | '/api/prices' | '/api/products' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/locations' | '/api/prices' | '/api/products' | '/api/auth/$'
  id:
    | '__root__'
    | '/api/locations'
    | '/api/prices'
    | '/api/products'
    | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiLocationsServerRoute: typeof ApiLocationsServerRoute
  ApiPricesServerRoute: typeof ApiPricesServerRoute
  ApiProductsServerRoute: typeof ApiProductsServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/products': {
      id: '/api/products'
      path: '/api/products'
      fullPath: '/api/products'
      preLoaderRoute: typeof ApiProductsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/prices': {
      id: '/api/prices'
      path: '/api/prices'
      fullPath: '/api/prices'
      preLoaderRoute: typeof ApiPricesServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/locations': {
      id: '/api/locations'
      path: '/api/locations'
      fullPath: '/api/locations'
      preLoaderRoute: typeof ApiLocationsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiLocationsServerRoute: ApiLocationsServerRoute,
  ApiPricesServerRoute: ApiPricesServerRoute,
  ApiProductsServerRoute: ApiProductsServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
